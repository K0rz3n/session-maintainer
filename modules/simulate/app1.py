# A class represents an app configuration in an environment
class AppSimulateStage:

    def __init__(self):

        # appname is used to uniquely identify a class in the database and requires global uniqueness.
        self.application_name = "app_simulate_staging"
        # Website login box page url
        self.login_page = "https://example.com/login"
        # A page with distinct return value characteristics that the browser needs to access after logging in, such as a user information page.
        self.login_check_page = "https://example.com/homepage"
        # After accessing the "login_page" through the browser, there must be a api that can be accessed and which returns the specific "login_check_benchmark".
        self.login_check_url = "https://example.com/username/userinfo"
        # The special string that appears in the response after accessing the logincheckurl API, used to determine whether the login is successful or not.
        self.login_check_benchmark = "user_id"
        # Many pages and APIs can be configured to obtain session information in different pages. Visiting a sessionpageurl can obtain session information configured in all sessionlists from the specified sessioncollection_url. For special scenarios such as SSO login, multiple page items can be configured to obtain different session lists of multiple submodules in a system.
        self.session_page_items = [
            {
                # session_page_name is only used for marking and placeholder
                "session_page_name":"page_tag",
                "session_page_url":"https://example.com/services",
                "session_collection_url":"https://example.com/services/getservices",
                "session_list":[
                    {
                        "session_id":1,
                        "session_name":"key1_name",
                        "session_key":"key1",
                    },
                    {
                        # session_id and session_name are only used for placeholding and marking, 
                        # which facilitates subsequent linkage with other systems.
                        # Only the int and string type are restricted here.
                        "session_id":2,
                        "session_name":"key2_name",
                        "session_key":"key2",
                    }
                ],
                # Used to configure how to check the validity of login status
                # The checker will use various parameters in the session_list stored in the database to 
                # fill/replace the corresponding location of the request packet to check the validity of the session.
                "session_state_check":{
                    # benchmark in response of session_collection_url
                   "session_check_benchmark":"",
                   # Plugin class name used to recalculate the signature in the API before initiating a check request. 
                   # Currently, only the interface is left, and has not been tested and implemented yet.
                   "session_check_resign":None
                }
            },
            {
                ...
            }
        ]



    def login(self, page):
        # Roller
        page.mouse.wheel(0, random.randint(120, 320))
        # The following object comes from the code generated by the playwright recording
        user_input   = page.get_by_placeholder("Please enter your account number")
        pwd_input    = page.get_by_placeholder("Please enter your password")
        consent_icon = page.locator('//*[@id="ice-container"]//i[contains(@class,"iconfont")]')
        login_btn    = page.get_by_role("button", name="login")

        # Username input that simulates human behavior
        page.human.type(user_input, "", per_key=(40, 95), typo_prob=0.02)
        # Password input that simulates human behavior
        page.human.type(pwd_input, "", per_key=(25, 60), secret=True)

        # Optional: Click the "consent" icon and then click back (simulate real users)
        try:
            page.human.click(consent_icon)
            page.wait_for_timeout(random.randint(120, 260))
            page.human.click(consent_icon)
            page.wait_for_timeout(random.randint(120, 260))
            page.human.click(consent_icon)
        except Exception:
            pass

        # Hover and then lick to log in
        try:
            page.human.hover(login_btn)
        except Exception:
            pass
        page.human.click(login_btn)

        # Wait after logging in
        page.wait_for_timeout(random.randint(500, 900))


    

        


class AppSimulateProd:

    def __init__(self):

        self.application_name = ""
        self.login_page = ""

        self.login_check_page = ""

        self.login_check_url = ""
        self.login_check_benchmark = ""
        self.session_page_items = [
                {
                    "session_page_name":"",
                    "session_page_url":"",
                    "session_collection_url":"",
                    "session_list":[
                        {
                            "session_id":3,
                            "session_name":"",
                            "session_key":"",
                        }
                    ],
                    "session_state_check":{
                        "session_check_benchmark":"",
                        "session_check_resign":""
                    }
                },
                {
                    ...
                }
            ]


    def login(self, page):
        pass